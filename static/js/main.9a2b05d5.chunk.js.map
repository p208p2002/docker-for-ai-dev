{"version":3,"sources":["TemplateGen.jsx","App.js","serviceWorker.js","index.js"],"names":["imageTags","ImageBtn","props","className","currentSelectImageTag","imageTag","id","onClick","App","setDocker","e","console","log","target","setState","docker","setImage","image","setOptions","checked","eleId","options","state","push","filter","option","addPort","portingInput","current","value","ports","portingInputValue","rmPort","port","p","codeServerPorting","jupyterPorting","sshPorting","name","password","create_volume","React","createRef","this","_name","cmd","undefined","createVolumeCMD","mountVolumeCMD","join","style","marginLeft","map","tag","i","key","type","defaultChecked","onChange","href","defaultValue","ref","placeholder","alert","data-clipboard-text","Component","position","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9a2b05d5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './TemplateGen.css'\nimport Clipboard from 'react-clipboard.js';\n\nconst imageTags = [\n  'p208p2002/docker-for-ai-dev:cu10.0-py36-tf1.14.0-torch1.3-jupyter-vscode',\n  'p208p2002/docker-for-ai-dev:cu10.1-py36-tf2.1.0-torch1.4-jupyter-vscode',\n  'p208p2002/docker-for-ai-dev:cu10.1-py36-tf2.3.0-torch1.6.0-jupyter-vscode',\n  'p208p2002/docker-for-ai-dev:cu10.1-py36-tf2.3.1-torch1.7.0-jupyter-vscode',\n  'p208p2002/docker-for-ai-dev:cu11.0-py36-nightly-jupyter-vscode'\n]\n\nfunction ImageBtn(props) {\n  return (\n    <button\n      className={`btn btn-sm ${props.currentSelectImageTag === props.imageTag ? 'btn-secondary active' : 'btn-secondary '}`}\n      id={props.imageTag}\n      onClick={props.onClick}\n    >\n      {props.imageTag}\n    </button>\n  )\n}\n\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      docker: 'docker run --gpus all',\n      image: imageTags[0],\n      options: ['-itd'],\n      ports: [],\n      codeServerPorting: '-p 8080:8080',\n      jupyterPorting: '-p 8888:8888',\n      sshPorting: '-p 22:22',\n      portingInputValue: '',\n      name: '',\n      password: '',\n      create_volume:true\n    }\n\n    this.portingInput = React.createRef()\n  }\n\n  setDocker = (e) => {\n    console.log(e.target.id)\n    this.setState({\n      docker: e.target.id\n    })\n  }\n\n  setImage = (e) => {\n    console.log(e.target.id)\n    this.setState({\n      image: e.target.id\n    })\n  }\n\n  setOptions = (e) => {\n    console.log(e.target.id, e.target.checked)\n    let eleId = e.target.id\n    let checked = e.target.checked\n    let { options } = this.state\n    if (checked) {\n      options.push(eleId)\n      this.setState({\n        options\n      })\n    }\n    else {\n      options = options.filter((option) => {\n        return !(option === eleId)\n      })\n      this.setState({\n        options\n      })\n    }\n  }\n\n  addPort = () => {\n    console.log(this.portingInput.current.value)\n    let addPort = this.portingInput.current.value\n    if (addPort === '' || typeof addPort === 'undefined') {\n      return\n    }\n    let { ports } = this.state\n    ports.push(`-p ${addPort}`)\n    this.setState({\n      ports,\n      portingInputValue: ''\n    })\n  }\n\n  rmPort = (port) => {\n    console.log(port)\n    let { ports } = this.state\n    ports = ports.filter((p) => {\n      return !(p === port)\n    })\n    this.setState({\n      ports\n    })\n  }\n\n  render() {\n    let { docker, image, options, ports, sshPorting, jupyterPorting, codeServerPorting, name, _name='', password, create_volume=true } = this.state\n    let cmd = undefined\n    let createVolumeCMD = undefined\n    let mountVolumeCMD = undefined\n    if(create_volume === true){\n      createVolumeCMD = `docker volume create ${_name}`\n      // mountVolumeCMD = `-v ${_name}:/root/user_data -v ${_name}:/home/${_name}/user_data`\n      mountVolumeCMD = `-v ${_name}:/user_data`\n      cmd = `${createVolumeCMD} && ${docker} ${mountVolumeCMD} ${options.join(' ')} ${ports.join(' ')} ${sshPorting} ${jupyterPorting} ${codeServerPorting} ${name} ${password} ${image}`\n    }\n    else{\n      cmd = `${docker} ${options.join(' ')} ${ports.join(' ')} ${sshPorting} ${jupyterPorting} ${codeServerPorting} ${name} ${password} ${image}`\n    }\n    \n    return (\n      <div id=\"TemplateGen\" className=\"container\">\n        <h3 className=\"text-center\">Dokcer for AI DEV</h3>\n        <h4>Docker setting</h4>\n        <div className=\"docker-setting\">\n          <div className=\"form-group row\" style={{ marginLeft: 0 }}>\n            <div>\n              <button\n                className={`btn btn-sm ${docker === 'docker run --gpus all' ? 'btn-secondary active' : 'btn-secondary '}`}\n                id=\"docker run --gpus all\"\n                onClick={this.setDocker}\n              >\n                with GPU and docker 19.03+\n            </button>\n            </div>\n            <div>\n              <button\n                className={`btn btn-sm ${docker === 'nvidia-docker run' ? 'btn-secondary active' : 'btn-secondary '}`}\n                id=\"nvidia-docker run\"\n                onClick={this.setDocker}\n              >\n                with nvidia-docker\n            </button>\n            </div>\n            <div>\n              <button\n                className={`btn btn-sm ${docker === 'docker run' ? 'btn-secondary active' : 'btn-secondary '}`}\n                id=\"docker run\"\n                onClick={this.setDocker}\n              >\n                only cpu\n            </button>\n            </div>\n          </div>\n        </div>\n\n\n        <h4>Select image</h4>\n        <div className=\"select-image\">\n          <div className=\"form-group row\">\n            {imageTags.map((tag, i) => {\n              return <div key={i} className=\"col-12\">\n                <ImageBtn\n                  imageTag={tag}\n                  currentSelectImageTag={image}\n                  onClick={this.setImage} />\n              </div>\n            })}\n          </div>\n        </div>\n\n        <h4>Container options</h4>\n        <div className=\"container-options\">\n          <div className=\"form-group\">\n          <div className=\"form-group form-check\">\n              <input\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                id=\"create_volume\"\n                defaultChecked={true}\n                onChange={()=>{\n                  this.setState({\n                    create_volume:!this.state.create_volume\n                  })\n                }}\n              />\n              <label className=\"form-check-label\">create_volume</label>\n            </div>\n\n            <div className=\"form-group form-check\">\n              <input\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                id=\"-itd\"\n                defaultChecked={true}\n                onChange={this.setOptions}\n              />\n              <label className=\"form-check-label\">-itd</label>\n            </div>\n\n            <div className=\"form-group form-check\">\n              <input\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                id=\"--restart=always\"\n                onChange={this.setOptions}\n              />\n              <label className=\"form-check-label\">--restart=always</label>\n            </div>\n          </div>\n        </div>\n\n        <h4>User account</h4>\n        <small>this setting is for login the service, and will not be record by anyone</small>\n        <br />\n        <small>you can check my source code on <a href=\"https://github.com/p208p2002/docker-for-ai-dev/tree/site-src\">github</a></small>\n        <div className=\"user-account\">\n          <div className=\"form-group\">\n            <p>User name\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                onChange={(e) => {\n                  this.setState({\n                    name: `--name=${e.target.value} -e\"NAME\"=${e.target.value}`,\n                    _name:e.target.value\n                  })\n                }}\n              /></p>\n            <p>Password\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                onChange={(e) => {\n                  this.setState({\n                    password: `-e\"PASSWORD\"=${e.target.value}`\n                  })\n                }}\n              /></p>\n          </div>\n        </div>\n\n        <h4>Service port</h4>\n        <div className=\"func-port\">\n          <div className=\"form-group\">\n            <p>code server(web vscode)\n              <input\n                defaultValue={8080}\n                type=\"text\"\n                className=\"form-control\"\n                onChange={(e) => {\n                  this.setState({\n                    codeServerPorting: `-p ${e.target.value}:8080`\n                  })\n                }}\n              /></p>\n            <p>jupyter\n              <input\n                defaultValue={8888}\n                type=\"text\"\n                className=\"form-control\"\n                onChange={(e) => {\n                  this.setState({\n                    jupyterPorting: `-p ${e.target.value}:8888`\n                  })\n                }}\n              /></p>\n            <p>ssh\n              <input\n                defaultValue={22}\n                type=\"text\"\n                className=\"form-control\"\n                onChange={(e) => {\n                  this.setState({\n                    sshPorting: `-p ${e.target.value}:22`\n                  })\n                }}\n              /></p>\n          </div>\n        </div>\n\n        <h4>Porting</h4>\n        <div className=\"porting\">\n          <div className=\"form row\">\n            <div className=\"form-group col-10 col-md-6\">\n              <input\n                ref={this.portingInput}\n                value={this.state.portingInputValue}\n                onChange={(e) => {\n                  this.setState({\n                    portingInputValue: e.target.value\n                  })\n                }}\n                type=\"text\"\n                placeholder=\"EXTERNAL_PORT:INTERNAL_PORT\"\n                className=\"form-control\" />\n              <ul>\n                {ports.map((port, i) => {\n                  return <li key={i}>{port} <span onClick={() => this.rmPort(port)} className=\"btn btn-sm btn-danger\">x</span></li>\n                })}\n              </ul>\n            </div>\n            <div className=\"form-group col-2\">\n              <div\n                className=\"btn btn btn-primary w-100 \"\n                onClick={this.addPort}\n              >add porting</div>\n            </div>\n          </div>\n        </div>\n\n        <h4>Docker run</h4>\n        <div className=\"form row\">\n          <div className=\"form-group col-10 col-md-6\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              onChange={() => { }}\n              value={cmd} />\n          </div>\n          <div className=\"form-group col-2\">\n            <Clipboard\n              onClick={() => {\n                if (password === '' || name === '') {\n                  alert('require Username and Password')\n                }\n              }}\n              className=\"btn btn btn-success w-100\"\n              data-clipboard-text={cmd}\n            >\n              copy to clipboard\n            </Clipboard>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n\n","import React, { Component } from 'react'\nimport './App.css';\nimport TemplateGen from './TemplateGen'\nimport GitHubForkRibbon from 'react-github-fork-ribbon';\nexport class App extends Component {\n  render() {\n    return (\n      <div>\n        <GitHubForkRibbon\n          href=\"https://github.com/p208p2002/docker-for-ai-dev\"\n          target=\"_blank\"\n          position=\"right\">\n          GitHub\n        </GitHubForkRibbon>\n        <TemplateGen />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}