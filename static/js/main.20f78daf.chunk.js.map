{"version":3,"sources":["TemplateGen.jsx","App.js","serviceWorker.js","index.js"],"names":["App","props","setDocker","e","console","log","target","id","setState","docker","setImage","image","setOptions","checked","eleId","options","state","push","filter","option","addPort","portingInput","current","value","ports","portingInputValue","rmPort","port","p","codeServerPort","jupyterPort","sshPort","React","createRef","this","cmd","join","className","style","marginLeft","onClick","type","defaultChecked","onChange","defaultValue","ref","placeholder","map","i","key","data-clipboard-text","Component","href","position","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.20f78daf.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './TemplateGen.css'\nimport Clipboard from 'react-clipboard.js';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      docker: 'docker run --gpus all',\n      image: 'p208p2002/docker-for-ai-dev:cu10.0-py36-tf1.14.0-torch1.3-jupyter-vscode',\n      options: ['-itd'],\n      ports: [],\n      codeServerPort: '-p 8080:8080',\n      jupyterPort: '-p 8888:8888',\n      sshPort: '-p 22:22',\n      portingInputValue: ''\n    }\n\n    this.portingInput = React.createRef()\n  }\n\n  setDocker = (e) => {\n    console.log(e.target.id)\n    this.setState({\n      docker: e.target.id\n    })\n  }\n\n  setImage = (e) => {\n    console.log(e.target.id)\n    this.setState({\n      image: e.target.id\n    })\n  }\n\n  setOptions = (e) => {\n    console.log(e.target.id, e.target.checked)\n    let eleId = e.target.id\n    let checked = e.target.checked\n    let { options } = this.state\n    if (checked) {\n      options.push(eleId)\n      this.setState({\n        options\n      })\n    }\n    else {\n      options = options.filter((option) => {\n        return !(option === eleId)\n      })\n      this.setState({\n        options\n      })\n    }\n  }\n\n  addPort = () => {\n    console.log(this.portingInput.current.value)\n    let addPort = this.portingInput.current.value\n    if (addPort === '' || typeof addPort === 'undefined') {\n      return\n    }\n    let { ports } = this.state\n    ports.push(`-p ${addPort}`)\n    this.setState({\n      ports,\n      portingInputValue: ''\n    })\n  }\n\n  rmPort = (port) => {\n    console.log(port)\n    let { ports } = this.state\n    ports = ports.filter((p) => {\n      return !(p === port)\n    })\n    this.setState({\n      ports\n    })\n  }\n\n  render() {\n    let { docker, image, options, ports, sshPort, jupyterPort, codeServerPort } = this.state\n    let cmd = `${docker} ${options.join(' ')} ${ports.join(' ')} ${sshPort} ${jupyterPort} ${codeServerPort} ${image}`\n    return (\n      <div id=\"TemplateGen\" className=\"container\">\n        <h3 className=\"text-center\">Dokcer for ai dev</h3>\n        <h4>Docker setting</h4>\n        <div className=\"docker-setting\">\n          <div className=\"form-group row\" style={{marginLeft:0}}>\n            <div>\n              <button\n                className={`btn btn-sm ${docker === 'docker run --gpus all' ? 'btn-outline-secondary' : 'btn-secondary '}`}\n                id=\"docker run --gpus all\"\n                onClick={this.setDocker}\n              >\n                with GPU and docker 19.03+\n            </button>\n            </div>\n            <div>\n              <button\n                className={`btn btn-sm ${docker === 'nvidia-docker run' ? 'btn-outline-secondary' : 'btn-secondary '}`}\n                id=\"nvidia-docker run\"\n                onClick={this.setDocker}\n              >\n                with nvidia-docker\n            </button>\n            </div>\n            <div>\n              <button\n                className={`btn btn-sm ${docker === 'docker run' ? 'btn-outline-secondary' : 'btn-secondary '}`}\n                id=\"docker run\"\n                onClick={this.setDocker}\n              >\n                only cpu\n            </button>\n            </div>\n          </div>\n        </div>\n\n\n        <h4>Select image</h4>\n        <div className=\"select-image\">\n          <div className=\"form-group row\">\n            <div className=\"col-12\">\n              <button\n                className={`btn btn-sm ${image === 'p208p2002/docker-for-ai-dev:cu10.0-py36-tf1.14.0-torch1.3-jupyter-vscode' ? 'btn-outline-secondary' : 'btn-secondary '}`}\n                id=\"p208p2002/docker-for-ai-dev:cu10.0-py36-tf1.14.0-torch1.3-jupyter-vscode\"\n                onClick={this.setImage}\n              >\n                docker-for-ai-dev:cu10.0-py36-tf1.14.0-torch1.3-jupyter-vscode\n            </button>\n            </div>\n            <div className=\"col-12\">\n              <button\n                className={`btn btn-sm ${image === 'p208p2002/docker-for-ai-dev:cu10.1-py36-tf2.1.0-torch1.4-jupyter-vscode' ? 'btn-outline-secondary' : 'btn-secondary '}`}\n                id=\"p208p2002/docker-for-ai-dev:cu10.1-py36-tf2.1.0-torch1.4-jupyter-vscode\"\n                onClick={this.setImage}\n              >\n                docker-for-ai-dev:cu10.1-py36-tf2.1.0-torch1.4-jupyter-vscode\n            </button>\n            </div>\n          </div>\n        </div>\n\n        <h4>Container options</h4>\n        <div className=\"container-options\">\n          <div className=\"form-group\">\n            <div className=\"form-group form-check\">\n              <input\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                id=\"-itd\"\n                defaultChecked={true}\n                onChange={this.setOptions}\n              />\n              <label className=\"form-check-label\">-itd</label>\n            </div>\n            <div className=\"form-group form-check\">\n              <input\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                id=\"--restart=always\"\n                onChange={this.setOptions}\n              />\n              <label className=\"form-check-label\">--restart=always</label>\n            </div>\n          </div>\n        </div>\n\n        <h4>Service port</h4>\n        <div className=\"func-port\">\n          <div className=\"form-group\">\n            <p>code server(web vscode)\n              <input\n                defaultValue={8080}\n                type=\"text\"\n                className=\"form-control\"\n                onChange={(e) => {\n                  this.setState({\n                    codeServerPort: `-p ${e.target.value}:8080`\n                  })\n                }}\n              /></p>\n            <p>jupyter\n              <input\n                defaultValue={8888}\n                type=\"text\"\n                className=\"form-control\"\n                onChange={(e) => {\n                  this.setState({\n                    jupyterPort: `-p ${e.target.value}:8888`\n                  })\n                }}\n              /></p>\n            <p>ssh\n              <input\n                defaultValue={22}\n                type=\"text\"\n                className=\"form-control\"\n                onChange={(e) => {\n                  this.setState({\n                    sshPort: `-p ${e.target.value}:22`\n                  })\n                }}\n              /></p>\n          </div>\n        </div>\n\n        <h4>Porting</h4>\n        <div className=\"porting\">\n          <div className=\"form row\">\n            <div className=\"form-group col-10 col-md-6\">\n              <input\n                ref={this.portingInput}\n                value={this.state.portingInputValue}\n                onChange={(e) => {\n                  this.setState({\n                    portingInputValue: e.target.value\n                  })\n                }}\n                type=\"text\"\n                placeholder=\"EXTERNAL_PORT:INTERNAL_PORT\"\n                className=\"form-control\" />\n              <ul>\n                {ports.map((port, i) => {\n                  return <li key={i}>{port} <span onClick={() => this.rmPort(port)} className=\"btn btn-sm btn-danger\">x</span></li>\n                })}\n              </ul>\n            </div>\n            <div className=\"form-group col-2\">\n              <div\n                className=\"btn btn btn-primary w-100 \"\n                onClick={this.addPort}\n              >add porting</div>\n            </div>\n          </div>\n        </div>\n\n        <h4>Docker run</h4>\n        <div className=\"form row\">\n          <div className=\"form-group col-10 col-md-6\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              onChange={() => { }}\n              value={cmd} />\n          </div>\n          <div className=\"form-group col-2\">\n            <Clipboard className=\"btn btn btn-success w-100\" data-clipboard-text={cmd}>\n              copy to clipboard\n          </Clipboard>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n\n","import React, { Component } from 'react'\nimport './App.css';\nimport TemplateGen from './TemplateGen'\nimport GitHubForkRibbon from 'react-github-fork-ribbon';\nexport class App extends Component {\n  render() {\n    return (\n      <div>\n        <GitHubForkRibbon\n          href=\"https://github.com/p208p2002/docker-for-ai-dev\"\n          target=\"_blank\"\n          position=\"right\">\n          GitHub\n        </GitHubForkRibbon>\n        <TemplateGen />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}